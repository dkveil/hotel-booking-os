services:
  redis:
    image: redis:latest
    container_name: hotel-booking-os-redis
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
  rabbitmq:
    image: rabbitmq:3-management
    container_name: hotel-booking-os-rabbitmq
    ports:
      - '${RABBITMQ_PORT}:5672'
      - '15672:15672'
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-password}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST:-/}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    
  # Zookeeper for Kafka
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.4.0
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   restart: unless-stopped
  #   ports:
  #     - "2181:2181"
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 256M
  #         cpus: '0.2'

  # # Kafka
  # kafka:
  #   image: confluentinc/cp-kafka:7.4.0
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 1G
  #         cpus: '0.5'

  # # Kafka Topic Creator
  # kafka-setup:
  #   image: confluentinc/cp-kafka:7.4.0
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   command: |
  #     bash -c '
  #       echo "Creating Kafka topics..."
  #       kafka-topics --create --topic user-events --bootstrap-server kafka:29092 --replication-factor 1 --partitions 3
  #       kafka-topics --create --topic logs --bootstrap-server kafka:29092 --replication-factor 1 --partitions 3
  #       kafka-topics --create --topic chat.new_message --bootstrap-server kafka:29092 --replication-factor 1 --partitions 3
  #       echo "Topics created successfully!"
  #     '
  #   restart: "no" 

volumes:
  redis-data:
  rabbitmq-data:

networks:
  app-network:
    driver: bridge 

